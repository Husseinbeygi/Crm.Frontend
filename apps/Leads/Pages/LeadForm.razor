@page "/leads/create"
@page "/leads/{id}"

@using Leads.Models.Leads;
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.Text.Encodings.Web;
@using System.Text.Unicode;

@inject Services.LeadsService _leadService
@inject NavigationManager navigationManager


<LoadingComponent Enabled="_isloading">
	<PageHeader BackIcon="true" Class="site-page-header" BackIconTemplate="icon">
		<PageHeaderTitle>Title</PageHeaderTitle>
		<PageHeaderSubtitle>This is a subtitle</PageHeaderSubtitle>
		<PageHeaderExtra>
			<Button>@(Resources.ButtonCaptions.Reset)</Button>
				<Button HtmlType="submit" OnClick="Save" Type="@ButtonType.Primary">@(Resources.ButtonCaptions.Save)</Button>
			</PageHeaderExtra>
			<PageHeaderContent>
				<Descriptions Size="small" Column="3">
					<DescriptionsItem Title="Created" Span="1">Lili Qu</DescriptionsItem>
					<DescriptionsItem Title="Association" Span="1"><a>421421</a></DescriptionsItem>
					<DescriptionsItem Title="Creation Time" Span="1">2017-01-10</DescriptionsItem>
					<DescriptionsItem Title="Effective Time" Span="1">2017-10-10</DescriptionsItem>
					<DescriptionsItem Title="Remarks" Span="2">
						Gonghu Road, Xihu District, Hangzhou, Zhejiang, China
					</DescriptionsItem>
				</Descriptions>
			</PageHeaderContent>
		</PageHeader>
		<div class="my-1">
			<Segmented Block Labels=@(_segmentdStatus) />
		</div>
		<div class="mt-2">
			<Leads.Forms.PrimaryForm @ref="_primaryForm" Model="Model" Options="Options" />
		</div>
	</LoadingComponent>

	@code {
	LeadsViewModel Model = new();
	bool _isloading = true;
	List<string> _segmentdStatus = new();
	Leads.Models.ValueObjects.Options Options = new();

	RenderFragment icon =@<Icon Type="arrow-left" />;

	[Parameter]
	public string? Id { get; set; }
	public Leads.Forms.PrimaryForm _primaryForm { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		AdjustRightToLeft();
		await GetLeadOptions();
		await GetUserDetailsIfPageHasId();
	}

	private async Task GetLeadOptions()
	{
		_isloading = true;

		Options = (await _leadService.GetAsync<Models.Response<Leads.Models.ValueObjects.Options>>("Leads/options")).data;

		foreach (var item in Options.leadStatus)
		{
			_segmentdStatus.Add(item.Name);
		}

		_isloading = false;
	}

	private void AdjustRightToLeft()
	{
		if (Thread.CurrentThread.CurrentUICulture.TextInfo.IsRightToLeft)
		{
			icon =@<Icon Type="arrow-right" />;
		}
	}

	private async Task Save()
	{
		var context = new ValidationContext(Model, serviceProvider: null, items: null);
		var validationResults = new List<ValidationResult>();

		if (Validator.TryValidateObject(Model, context, validationResults))
		{
			_primaryForm.Enabled = true;
			if (IsPageHasId())
			{
				Model.Id = Guid.Parse(Id);
				await _leadService.PatchAsync<LeadsViewModel, Leads.Models.ListResponse<LeadsViewModel>>("Leads", Model);
			}
			else
			{
				await _leadService.PostAsync<LeadsViewModel, Leads.Models.ListResponse<LeadsViewModel>>("Leads", Model);
			}
			_primaryForm.Enabled = false;

			navigationManager.NavigateTo("/Leads");
		}
		else
		{
			_primaryForm.ValidateForms();

		}
	}

	private bool IsPageHasId()
	{
		return !string.IsNullOrWhiteSpace(Id);
	}

	private async Task GetUserDetailsIfPageHasId()
	{
		if (IsPageHasId())
		{
			var Response = await _leadService.GetAsync<Models.Response<LeadsViewModel>>($"Leads/{Id}");
			Model = Response.data;
		}
	}
}
